<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!-- Do not update this file manually
     Changes should be discussed with the team -->
<module name="Checker">
    <!-- Sets UTF-8 encoding for all project files -->
    <property name="charset" value="UTF-8"/>

    <module name="TreeWalker">
        <!-- Ensures methods that override superclass methods are marked with @Override -->
        <module name="MissingOverride"/>

        <!-- Enforces Java-style placement of opening curly braces -->
        <module name="LeftCurly">
            <property name="ignoreEnums" value="true"/>
        </module>

        <!-- Enforces curly braces for all control statements to prevent bugs (if, else, for, while) -->
        <module name="NeedBraces"/>

        <!-- Detects empty statements (lone semicolons) that could indicate programming errors -->
        <module name="EmptyStatement"/>

        <!-- Ensures hashCode() is implemented whenever equals() is overridden to maintain the contract -->
        <module name="EqualsHashCode"/>

        <!-- Simplifies boolean expressions (e.g., changes 'return x == true' to 'return x') -->
        <module name="SimplifyBooleanReturn"/>

        <!-- Ensures string comparisons use .equals() instead of == to properly compare string contents -->
        <module name="StringLiteralEquality"/>

        <!-- Improves code readability by allowing only one statement per line -->
        <module name="OneStatementPerLine"/>

        <!-- Prevents wildcard imports (e.g., java.util.*) to make dependencies explicit -->
        <module name="AvoidStarImport"/>

        <!-- Prevents imports from problematic or internal packages for better compatibility -->
        <module name="IllegalImport">
            <property name="illegalPkgs"
                      value="sun, junit.framework, org.apache.log4j, org.jetbrains.annotations, javax"/>
        </module>

        <!-- Removes duplicate import statements -->
        <module name="RedundantImport"/>

        <!-- Removes imports that aren't used in the code -->
        <module name="UnusedImports"/>

        <!-- Organizes imports in a consistent, readable manner -->
        <module name="ImportOrder">
            <property name="option" value="top"/>  <!-- Static imports appear before other imports -->
            <property name="ordered" value="true"/>  <!-- Alphabetical ordering within groups -->
            <property name="separated" value="false"/>  <!-- No blank lines between import groups -->
        </module>

        <!-- Enforces uppercase 'L' for long literals to avoid confusion with '1' -->
        <module name="UpperEll"/>

        <!-- Enforces consistent array declaration style: String[] args instead of String args[] -->
        <module name="ArrayTypeStyle"/>

        <!-- Enforces standard naming conventions for class fields -->
        <module name="MemberName"/>

        <!-- Enforces standard Java naming conventions for methods -->
        <module name="MethodName"/>

        <!-- Enforces lowercase with dots for package names -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>

        <!-- Enforces standard naming conventions for method parameters -->
        <module name="ParameterName"/>

        <!-- Restricts identifiers to alphanumeric characters and underscores -->
        <module name="IllegalIdentifierName">
            <property name="format" value="^[a-zA-Z0-9_]+$"/>
        </module>

        <!-- Limits number of top-level classes/interfaces per file for better organization -->
        <module name="OuterTypeNumber"/>

        <!-- Ensures consistent spacing in generic type declarations -->
        <module name="GenericWhitespace"/>

        <!-- Ensures consistent spacing in method parameters -->
        <module name="MethodParamPad"/>

        <!-- Enforces consistent spacing inside parentheses -->
        <module name="ParenPad"/>

        <!-- Enforces consistent spacing in type casts -->
        <module name="TypecastParenPad"/>

        <!-- Requires space after commas and semicolons for readability -->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>

        <!-- Discourages use of @author tags in favor of version control history -->
        <module name="MatchXpath">
            <property name="query"
                      value="//COMMENT_CONTENT[contains(@text, '@author') and (starts-with(@text, '*\n') or not(contains(@text, '\n')))]"/>
            <message key="matchxpath.match" value="Avoid using @author tags in documentation"/>
        </module>

        <!-- Encourages explicit type declaration for primitive values instead of 'var' -->
        <module name="MatchXpath">
            <property name="query"
                      value="//VARIABLE_DEF/TYPE/IDENT[@text='var']/../../ASSIGN/EXPR/*[self::LITERAL_FALSE or self::LITERAL_TRUE or self::NUM_INT or self::NUM_LONG or self::NUM_FLOAT or self::NUM_DOUBLE or self::CHAR_LITERAL]"/>
            <message key="matchxpath.match" value="Use explicit types instead of var for primitives"/>
        </module>

        <!-- Prevents Optional in method parameters as it complicates method contracts -->
        <module name="MatchXpath">
            <property name="query"
                      value="//CLASS_DEF/OBJBLOCK/*[self::METHOD_DEF or self::CTOR_DEF][not(MODIFIERS/ANNOTATION/IDENT[@text='Override'])]/PARAMETERS/PARAMETER_DEF/TYPE/IDENT[@text='Optional']"/>
            <message key="matchxpath.match" value="Avoid Optional in method parameters"/>
        </module>

        <!-- Prevents Optional in class fields to avoid serialization issues -->
        <module name="MatchXpath">
            <property name="query" value="//CLASS_DEF/OBJBLOCK/VARIABLE_DEF/TYPE/IDENT[@text='Optional']"/>
            <message key="matchxpath.match" value="Avoid Optional in class fields"/>
        </module>

        <!-- Ensures proper documentation for deprecated code -->
        <module name="MissingDeprecated"/>

        <!-- Enforces consistent spacing around operators for readability -->
        <module name="WhitespaceAround">
            <property name="tokens"
                      value="ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV,DIV_ASSIGN,EQUAL,GE,GT,LAMBDA,LAND,LE,LOR,LT,MINUS,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,SL,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN"/>
        </module>

        <!-- Requires trailing comma in multiline array initializations for easier diffs -->
        <module name="ArrayTrailingComma"/>

        <!-- Places nested classes at the end of the containing class for better readability -->
        <module name="InnerTypeLast"/>

        <!-- Enables @SuppressWarnings annotations for individual rule suppression -->
        <module name="SuppressWarningsHolder"/>
    </module>

    <!-- Limits line length to 150 characters for readability -->
    <module name="LineLength">
        <property name="max" value="150"/>
    </module>

    <!-- Ensures files end with a newline for compatibility with Unix tools -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <!-- Prevents tab characters to ensure consistent formatting across editors -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Enables @SuppressWarnings support at the file level -->
    <module name="SuppressWarningsFilter"/>

    <!-- Specifies the file containing suppression rules.
         This file lists checks that should be ignored for certain files or patterns  -->
    <module name="SuppressionFilter">
        <property name="file" value="${config_loc}/suppressions.xml"/>
    </module>
</module>
